// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	base "github.com/projecteru2/yavirt/internal/volume/base"
	mock "github.com/stretchr/testify/mock"
)

// SnapshotAPI is an autogenerated mock type for the SnapshotAPI type
type SnapshotAPI struct {
	mock.Mock
}

// Commit provides a mock function with given fields: rootID
func (_m *SnapshotAPI) Commit(rootID string) error {
	ret := _m.Called(rootID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(rootID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitByDay provides a mock function with given fields: day
func (_m *SnapshotAPI) CommitByDay(day int) error {
	ret := _m.Called(day)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(day)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields:
func (_m *SnapshotAPI) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *SnapshotAPI) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAll provides a mock function with given fields:
func (_m *SnapshotAPI) DeleteAll() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Download provides a mock function with given fields: id
func (_m *SnapshotAPI) Download(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *SnapshotAPI) List() base.Snapshots {
	ret := _m.Called()

	var r0 base.Snapshots
	if rf, ok := ret.Get(0).(func() base.Snapshots); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(base.Snapshots)
		}
	}

	return r0
}

// Restore provides a mock function with given fields: rootID
func (_m *SnapshotAPI) Restore(rootID string) error {
	ret := _m.Called(rootID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(rootID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upload provides a mock function with given fields: id, force
func (_m *SnapshotAPI) Upload(id string, force bool) error {
	ret := _m.Called(id, force)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(id, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSnapshotAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewSnapshotAPI creates a new instance of SnapshotAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSnapshotAPI(t mockConstructorTestingTNewSnapshotAPI) *SnapshotAPI {
	mock := &SnapshotAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
