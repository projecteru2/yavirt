// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	libyavirttypes "github.com/projecteru2/libyavirt/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/projecteru2/yavirt/internal/types"

	utils "github.com/projecteru2/yavirt/internal/utils"

	vmimagetypes "github.com/yuyang0/vmimage/types"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AttachGuest provides a mock function with given fields: ctx, id, stream, flags
func (_m *Service) AttachGuest(ctx context.Context, id string, stream io.ReadWriteCloser, flags types.OpenConsoleFlags) error {
	ret := _m.Called(ctx, id, stream, flags)

	if len(ret) == 0 {
		panic("no return value specified for AttachGuest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.ReadWriteCloser, types.OpenConsoleFlags) error); ok {
		r0 = rf(ctx, id, stream, flags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CaptureGuest provides a mock function with given fields: ctx, id, imgName, overridden
func (_m *Service) CaptureGuest(ctx context.Context, id string, imgName string, overridden bool) (*vmimagetypes.Image, error) {
	ret := _m.Called(ctx, id, imgName, overridden)

	if len(ret) == 0 {
		panic("no return value specified for CaptureGuest")
	}

	var r0 *vmimagetypes.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) (*vmimagetypes.Image, error)); ok {
		return rf(ctx, id, imgName, overridden)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) *vmimagetypes.Image); ok {
		r0 = rf(ctx, id, imgName, overridden)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vmimagetypes.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = rf(ctx, id, imgName, overridden)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cat provides a mock function with given fields: ctx, id, path, dest
func (_m *Service) Cat(ctx context.Context, id string, path string, dest io.WriteCloser) error {
	ret := _m.Called(ctx, id, path, dest)

	if len(ret) == 0 {
		panic("no return value specified for Cat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.WriteCloser) error); ok {
		r0 = rf(ctx, id, path, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitSnapshot provides a mock function with given fields: ctx, req
func (_m *Service) CommitSnapshot(ctx context.Context, req libyavirttypes.CommitSnapshotReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CommitSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, libyavirttypes.CommitSnapshotReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitSnapshotByDay provides a mock function with given fields: ctx, id, volID, day
func (_m *Service) CommitSnapshotByDay(ctx context.Context, id string, volID string, day int) error {
	ret := _m.Called(ctx, id, volID, day)

	if len(ret) == 0 {
		panic("no return value specified for CommitSnapshotByDay")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, id, volID, day)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConnectNetwork provides a mock function with given fields: ctx, id, network, ipv4
func (_m *Service) ConnectNetwork(ctx context.Context, id string, network string, ipv4 string) (string, error) {
	ret := _m.Called(ctx, id, network, ipv4)

	if len(ret) == 0 {
		panic("no return value specified for ConnectNetwork")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, id, network, ipv4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, id, network, ipv4)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, id, network, ipv4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ControlGuest provides a mock function with given fields: ctx, id, operation, force
func (_m *Service) ControlGuest(ctx context.Context, id string, operation string, force bool) error {
	ret := _m.Called(ctx, id, operation, force)

	if len(ret) == 0 {
		panic("no return value specified for ControlGuest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, id, operation, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopyToGuest provides a mock function with given fields: ctx, id, dest, content, override
func (_m *Service) CopyToGuest(ctx context.Context, id string, dest string, content chan []byte, override bool) error {
	ret := _m.Called(ctx, id, dest, content, override)

	if len(ret) == 0 {
		panic("no return value specified for CopyToGuest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, chan []byte, bool) error); ok {
		r0 = rf(ctx, id, dest, content, override)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGuest provides a mock function with given fields: ctx, opts
func (_m *Service) CreateGuest(ctx context.Context, opts types.GuestCreateOption) (*libyavirttypes.Guest, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateGuest")
	}

	var r0 *libyavirttypes.Guest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.GuestCreateOption) (*libyavirttypes.Guest, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.GuestCreateOption) *libyavirttypes.Guest); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libyavirttypes.Guest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.GuestCreateOption) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshot provides a mock function with given fields: ctx, req
func (_m *Service) CreateSnapshot(ctx context.Context, req libyavirttypes.CreateSnapshotReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, libyavirttypes.CreateSnapshotReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DigestImage provides a mock function with given fields: ctx, imageName, local
func (_m *Service) DigestImage(ctx context.Context, imageName string, local bool) ([]string, error) {
	ret := _m.Called(ctx, imageName, local)

	if len(ret) == 0 {
		panic("no return value specified for DigestImage")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) ([]string, error)); ok {
		return rf(ctx, imageName, local)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) []string); ok {
		r0 = rf(ctx, imageName, local)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, imageName, local)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisconnectNetwork provides a mock function with given fields: ctx, id, network
func (_m *Service) DisconnectNetwork(ctx context.Context, id string, network string) error {
	ret := _m.Called(ctx, id, network)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectNetwork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, network)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecExitCode provides a mock function with given fields: id, pid
func (_m *Service) ExecExitCode(id string, pid int) (int, error) {
	ret := _m.Called(id, pid)

	if len(ret) == 0 {
		panic("no return value specified for ExecExitCode")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (int, error)); ok {
		return rf(id, pid)
	}
	if rf, ok := ret.Get(0).(func(string, int) int); ok {
		r0 = rf(id, pid)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(id, pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteGuest provides a mock function with given fields: ctx, id, commands
func (_m *Service) ExecuteGuest(ctx context.Context, id string, commands []string) (*libyavirttypes.ExecuteGuestMessage, error) {
	ret := _m.Called(ctx, id, commands)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteGuest")
	}

	var r0 *libyavirttypes.ExecuteGuestMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (*libyavirttypes.ExecuteGuestMessage, error)); ok {
		return rf(ctx, id, commands)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) *libyavirttypes.ExecuteGuestMessage); ok {
		r0 = rf(ctx, id, commands)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libyavirttypes.ExecuteGuestMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, id, commands)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuest provides a mock function with given fields: ctx, id
func (_m *Service) GetGuest(ctx context.Context, id string) (*libyavirttypes.Guest, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetGuest")
	}

	var r0 *libyavirttypes.Guest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*libyavirttypes.Guest, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *libyavirttypes.Guest); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libyavirttypes.Guest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuestIDList provides a mock function with given fields: ctx
func (_m *Service) GetGuestIDList(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGuestIDList")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGuestUUID provides a mock function with given fields: ctx, id
func (_m *Service) GetGuestUUID(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetGuestUUID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Info provides a mock function with given fields:
func (_m *Service) Info() (*libyavirttypes.HostInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 *libyavirttypes.HostInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (*libyavirttypes.HostInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *libyavirttypes.HostInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libyavirttypes.HostInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsHealthy provides a mock function with given fields: ctx
func (_m *Service) IsHealthy(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsHealthy")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListImage provides a mock function with given fields: ctx, filter
func (_m *Service) ListImage(ctx context.Context, filter string) ([]*vmimagetypes.Image, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListImage")
	}

	var r0 []*vmimagetypes.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*vmimagetypes.Image, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*vmimagetypes.Image); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*vmimagetypes.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshot provides a mock function with given fields: ctx, req
func (_m *Service) ListSnapshot(ctx context.Context, req libyavirttypes.ListSnapshotReq) (libyavirttypes.Snapshots, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshot")
	}

	var r0 libyavirttypes.Snapshots
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, libyavirttypes.ListSnapshotReq) (libyavirttypes.Snapshots, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, libyavirttypes.ListSnapshotReq) libyavirttypes.Snapshots); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(libyavirttypes.Snapshots)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, libyavirttypes.ListSnapshotReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Log provides a mock function with given fields: ctx, id, logPath, n, dest
func (_m *Service) Log(ctx context.Context, id string, logPath string, n int, dest io.WriteCloser) error {
	ret := _m.Called(ctx, id, logPath, n, dest)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, io.WriteCloser) error); ok {
		r0 = rf(ctx, id, logPath, n, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NetworkList provides a mock function with given fields: ctx, drivers
func (_m *Service) NetworkList(ctx context.Context, drivers []string) ([]*libyavirttypes.Network, error) {
	ret := _m.Called(ctx, drivers)

	if len(ret) == 0 {
		panic("no return value specified for NetworkList")
	}

	var r0 []*libyavirttypes.Network
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*libyavirttypes.Network, error)); ok {
		return rf(ctx, drivers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*libyavirttypes.Network); ok {
		r0 = rf(ctx, drivers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*libyavirttypes.Network)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, drivers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *Service) Ping() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// PullImage provides a mock function with given fields: ctx, imgName
func (_m *Service) PullImage(ctx context.Context, imgName string) (*vmimagetypes.Image, io.ReadCloser, error) {
	ret := _m.Called(ctx, imgName)

	if len(ret) == 0 {
		panic("no return value specified for PullImage")
	}

	var r0 *vmimagetypes.Image
	var r1 io.ReadCloser
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*vmimagetypes.Image, io.ReadCloser, error)); ok {
		return rf(ctx, imgName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *vmimagetypes.Image); ok {
		r0 = rf(ctx, imgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vmimagetypes.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) io.ReadCloser); ok {
		r1 = rf(ctx, imgName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, imgName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PushImage provides a mock function with given fields: ctx, imgName, force
func (_m *Service) PushImage(ctx context.Context, imgName string, force bool) (io.ReadCloser, error) {
	ret := _m.Called(ctx, imgName, force)

	if len(ret) == 0 {
		panic("no return value specified for PushImage")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (io.ReadCloser, error)); ok {
		return rf(ctx, imgName, force)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) io.ReadCloser); ok {
		r0 = rf(ctx, imgName, force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, imgName, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawEngine provides a mock function with given fields: ctx, id, req
func (_m *Service) RawEngine(ctx context.Context, id string, req libyavirttypes.RawEngineReq) (libyavirttypes.RawEngineResp, error) {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for RawEngine")
	}

	var r0 libyavirttypes.RawEngineResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, libyavirttypes.RawEngineReq) (libyavirttypes.RawEngineResp, error)); ok {
		return rf(ctx, id, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, libyavirttypes.RawEngineReq) libyavirttypes.RawEngineResp); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Get(0).(libyavirttypes.RawEngineResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, libyavirttypes.RawEngineReq) error); ok {
		r1 = rf(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveImage provides a mock function with given fields: ctx, imageName, force, prune
func (_m *Service) RemoveImage(ctx context.Context, imageName string, force bool, prune bool) ([]string, error) {
	ret := _m.Called(ctx, imageName, force, prune)

	if len(ret) == 0 {
		panic("no return value specified for RemoveImage")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, bool) ([]string, error)); ok {
		return rf(ctx, imageName, force, prune)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, bool) []string); ok {
		r0 = rf(ctx, imageName, force, prune)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool, bool) error); ok {
		r1 = rf(ctx, imageName, force, prune)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResizeConsoleWindow provides a mock function with given fields: ctx, id, height, width
func (_m *Service) ResizeConsoleWindow(ctx context.Context, id string, height uint, width uint) error {
	ret := _m.Called(ctx, id, height, width)

	if len(ret) == 0 {
		panic("no return value specified for ResizeConsoleWindow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint, uint) error); ok {
		r0 = rf(ctx, id, height, width)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResizeGuest provides a mock function with given fields: ctx, id, opts
func (_m *Service) ResizeGuest(ctx context.Context, id string, opts *types.GuestResizeOption) error {
	ret := _m.Called(ctx, id, opts)

	if len(ret) == 0 {
		panic("no return value specified for ResizeGuest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.GuestResizeOption) error); ok {
		r0 = rf(ctx, id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RestoreSnapshot provides a mock function with given fields: ctx, req
func (_m *Service) RestoreSnapshot(ctx context.Context, req libyavirttypes.RestoreSnapshotReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RestoreSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, libyavirttypes.RestoreSnapshotReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Wait provides a mock function with given fields: ctx, id, block
func (_m *Service) Wait(ctx context.Context, id string, block bool) (string, int, error) {
	ret := _m.Called(ctx, id, block)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (string, int, error)); ok {
		return rf(ctx, id, block)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) string); ok {
		r0 = rf(ctx, id, block)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) int); ok {
		r1 = rf(ctx, id, block)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, bool) error); ok {
		r2 = rf(ctx, id, block)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WatchGuestEvents provides a mock function with given fields: _a0
func (_m *Service) WatchGuestEvents(_a0 context.Context) (*utils.Watcher, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WatchGuestEvents")
	}

	var r0 *utils.Watcher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*utils.Watcher, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *utils.Watcher); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Watcher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
