// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	libvirt "github.com/libvirt/libvirt-go"
	mock "github.com/stretchr/testify/mock"
)

// Domain is an autogenerated mock type for the Domain type
type Domain struct {
	mock.Mock
}

// AmplifyVolume provides a mock function with given fields: filepath, cap
func (_m *Domain) AmplifyVolume(filepath string, cap uint64) error {
	ret := _m.Called(filepath, cap)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64) error); ok {
		r0 = rf(filepath, cap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttachVolume provides a mock function with given fields: filepath, devName
func (_m *Domain) AttachVolume(filepath string, devName string) (libvirt.DomainState, error) {
	ret := _m.Called(filepath, devName)

	var r0 libvirt.DomainState
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (libvirt.DomainState, error)); ok {
		return rf(filepath, devName)
	}
	if rf, ok := ret.Get(0).(func(string, string) libvirt.DomainState); ok {
		r0 = rf(filepath, devName)
	} else {
		r0 = ret.Get(0).(libvirt.DomainState)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(filepath, devName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Boot provides a mock function with given fields:
func (_m *Domain) Boot() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckShutoff provides a mock function with given fields:
func (_m *Domain) CheckShutoff() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Define provides a mock function with given fields:
func (_m *Domain) Define() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConsoleTtyname provides a mock function with given fields:
func (_m *Domain) GetConsoleTtyname() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields:
func (_m *Domain) GetState() (libvirt.DomainState, error) {
	ret := _m.Called()

	var r0 libvirt.DomainState
	var r1 error
	if rf, ok := ret.Get(0).(func() (libvirt.DomainState, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() libvirt.DomainState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(libvirt.DomainState)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUUID provides a mock function with given fields:
func (_m *Domain) GetUUID() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resume provides a mock function with given fields:
func (_m *Domain) Resume() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSpec provides a mock function with given fields: cpu, mem
func (_m *Domain) SetSpec(cpu int, mem int64) error {
	ret := _m.Called(cpu, mem)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int64) error); ok {
		r0 = rf(cpu, mem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: force
func (_m *Domain) Shutdown(force bool) error {
	ret := _m.Called(force)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Suspend provides a mock function with given fields:
func (_m *Domain) Suspend() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Undefine provides a mock function with given fields:
func (_m *Domain) Undefine() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDomain interface {
	mock.TestingT
	Cleanup(func())
}

// NewDomain creates a new instance of Domain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDomain(t mockConstructorTestingTNewDomain) *Domain {
	mock := &Domain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
