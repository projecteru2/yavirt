// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	libvirt "github.com/projecteru2/yavirt/third_party/libvirt"

	mock "github.com/stretchr/testify/mock"

	pkglibvirt "github.com/projecteru2/yavirt/pkg/libvirt"

	types "github.com/projecteru2/yavirt/internal/types"
)

// Domain is an autogenerated mock type for the Domain type
type Domain struct {
	mock.Mock
}

// AmplifyVolume provides a mock function with given fields: filepath, cap
func (_m *Domain) AmplifyVolume(filepath string, cap uint64) error {
	ret := _m.Called(filepath, cap)

	if len(ret) == 0 {
		panic("no return value specified for AmplifyVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64) error); ok {
		r0 = rf(filepath, cap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttachGPU provides a mock function with given fields: prod, count
func (_m *Domain) AttachGPU(prod string, count int) (libvirt.DomainState, error) {
	ret := _m.Called(prod, count)

	if len(ret) == 0 {
		panic("no return value specified for AttachGPU")
	}

	var r0 libvirt.DomainState
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (libvirt.DomainState, error)); ok {
		return rf(prod, count)
	}
	if rf, ok := ret.Get(0).(func(string, int) libvirt.DomainState); ok {
		r0 = rf(prod, count)
	} else {
		r0 = ret.Get(0).(libvirt.DomainState)
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(prod, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachVolume provides a mock function with given fields: buf
func (_m *Domain) AttachVolume(buf []byte) (libvirt.DomainState, error) {
	ret := _m.Called(buf)

	if len(ret) == 0 {
		panic("no return value specified for AttachVolume")
	}

	var r0 libvirt.DomainState
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (libvirt.DomainState, error)); ok {
		return rf(buf)
	}
	if rf, ok := ret.Get(0).(func([]byte) libvirt.DomainState); ok {
		r0 = rf(buf)
	} else {
		r0 = ret.Get(0).(libvirt.DomainState)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(buf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Boot provides a mock function with given fields: ctx
func (_m *Domain) Boot(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Boot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckRunning provides a mock function with given fields:
func (_m *Domain) CheckRunning() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckRunning")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckShutoff provides a mock function with given fields:
func (_m *Domain) CheckShutoff() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckShutoff")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Define provides a mock function with given fields:
func (_m *Domain) Define() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Define")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachGPU provides a mock function with given fields: prod, count
func (_m *Domain) DetachGPU(prod string, count int) (libvirt.DomainState, error) {
	ret := _m.Called(prod, count)

	if len(ret) == 0 {
		panic("no return value specified for DetachGPU")
	}

	var r0 libvirt.DomainState
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (libvirt.DomainState, error)); ok {
		return rf(prod, count)
	}
	if rf, ok := ret.Get(0).(func(string, int) libvirt.DomainState); ok {
		r0 = rf(prod, count)
	} else {
		r0 = ret.Get(0).(libvirt.DomainState)
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(prod, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachVolume provides a mock function with given fields: dev
func (_m *Domain) DetachVolume(dev string) (libvirt.DomainState, error) {
	ret := _m.Called(dev)

	if len(ret) == 0 {
		panic("no return value specified for DetachVolume")
	}

	var r0 libvirt.DomainState
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (libvirt.DomainState, error)); ok {
		return rf(dev)
	}
	if rf, ok := ret.Get(0).(func(string) libvirt.DomainState); ok {
		r0 = rf(dev)
	} else {
		r0 = ret.Get(0).(libvirt.DomainState)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsoleTtyname provides a mock function with given fields:
func (_m *Domain) GetConsoleTtyname() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConsoleTtyname")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields:
func (_m *Domain) GetState() (libvirt.DomainState, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 libvirt.DomainState
	var r1 error
	if rf, ok := ret.Get(0).(func() (libvirt.DomainState, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() libvirt.DomainState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(libvirt.DomainState)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUUID provides a mock function with given fields:
func (_m *Domain) GetUUID() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUUID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lookup provides a mock function with given fields:
func (_m *Domain) Lookup() (pkglibvirt.Domain, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Lookup")
	}

	var r0 pkglibvirt.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func() (pkglibvirt.Domain, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() pkglibvirt.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pkglibvirt.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenConsole provides a mock function with given fields: devname, flages
func (_m *Domain) OpenConsole(devname string, flages types.OpenConsoleFlags) (*pkglibvirt.Console, error) {
	ret := _m.Called(devname, flages)

	if len(ret) == 0 {
		panic("no return value specified for OpenConsole")
	}

	var r0 *pkglibvirt.Console
	var r1 error
	if rf, ok := ret.Get(0).(func(string, types.OpenConsoleFlags) (*pkglibvirt.Console, error)); ok {
		return rf(devname, flages)
	}
	if rf, ok := ret.Get(0).(func(string, types.OpenConsoleFlags) *pkglibvirt.Console); ok {
		r0 = rf(devname, flages)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkglibvirt.Console)
		}
	}

	if rf, ok := ret.Get(1).(func(string, types.OpenConsoleFlags) error); ok {
		r1 = rf(devname, flages)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceSysVolume provides a mock function with given fields: diskXML
func (_m *Domain) ReplaceSysVolume(diskXML string) error {
	ret := _m.Called(diskXML)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceSysVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(diskXML)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resume provides a mock function with given fields:
func (_m *Domain) Resume() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Resume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSpec provides a mock function with given fields: cpu, mem
func (_m *Domain) SetSpec(cpu int, mem int64) error {
	ret := _m.Called(cpu, mem)

	if len(ret) == 0 {
		panic("no return value specified for SetSpec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int64) error); ok {
		r0 = rf(cpu, mem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: ctx, force
func (_m *Domain) Shutdown(ctx context.Context, force bool) error {
	ret := _m.Called(ctx, force)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Suspend provides a mock function with given fields:
func (_m *Domain) Suspend() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Suspend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Undefine provides a mock function with given fields:
func (_m *Domain) Undefine() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Undefine")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDomain creates a new instance of Domain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDomain(t interface {
	mock.TestingT
	Cleanup(func())
}) *Domain {
	mock := &Domain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
