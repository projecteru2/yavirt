// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Qmp is an autogenerated mock type for the Qmp type
type Qmp struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Qmp) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseFile provides a mock function with given fields: ctx, handle
func (_m *Qmp) CloseFile(ctx context.Context, handle int) error {
	ret := _m.Called(ctx, handle)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, handle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exec provides a mock function with given fields: ctx, cmd, args, stdio
func (_m *Qmp) Exec(ctx context.Context, cmd string, args []string, stdio bool) ([]byte, error) {
	ret := _m.Called(ctx, cmd, args, stdio)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, bool) ([]byte, error)); ok {
		return rf(ctx, cmd, args, stdio)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, bool) []byte); ok {
		r0 = rf(ctx, cmd, args, stdio)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, bool) error); ok {
		r1 = rf(ctx, cmd, args, stdio)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecStatus provides a mock function with given fields: ctx, pid
func (_m *Qmp) ExecStatus(ctx context.Context, pid int) ([]byte, error) {
	ret := _m.Called(ctx, pid)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]byte, error)); ok {
		return rf(ctx, pid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []byte); ok {
		r0 = rf(ctx, pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FSFreezeAll provides a mock function with given fields: ctx
func (_m *Qmp) FSFreezeAll(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FSFreezeList provides a mock function with given fields: ctx, mountpoints
func (_m *Qmp) FSFreezeList(ctx context.Context, mountpoints []string) (int, error) {
	ret := _m.Called(ctx, mountpoints)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (int, error)); ok {
		return rf(ctx, mountpoints)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) int); ok {
		r0 = rf(ctx, mountpoints)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, mountpoints)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FSFreezeStatus provides a mock function with given fields: ctx
func (_m *Qmp) FSFreezeStatus(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FSThawAll provides a mock function with given fields: ctx
func (_m *Qmp) FSThawAll(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlushFile provides a mock function with given fields: ctx, handle
func (_m *Qmp) FlushFile(ctx context.Context, handle int) error {
	ret := _m.Called(ctx, handle)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, handle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *Qmp) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OpenFile provides a mock function with given fields: ctx, path, mode
func (_m *Qmp) OpenFile(ctx context.Context, path string, mode string) ([]byte, error) {
	ret := _m.Called(ctx, path, mode)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, path, mode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, path, mode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, path, mode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFile provides a mock function with given fields: ctx, handle, p
func (_m *Qmp) ReadFile(ctx context.Context, handle int, p []byte) (int, bool, error) {
	ret := _m.Called(ctx, handle, p)

	var r0 int
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []byte) (int, bool, error)); ok {
		return rf(ctx, handle, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, []byte) int); ok {
		r0 = rf(ctx, handle, p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, []byte) bool); ok {
		r1 = rf(ctx, handle, p)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, []byte) error); ok {
		r2 = rf(ctx, handle, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SeekFile provides a mock function with given fields: ctx, handle, offset, whence
func (_m *Qmp) SeekFile(ctx context.Context, handle int, offset int, whence int) (int, bool, error) {
	ret := _m.Called(ctx, handle, offset, whence)

	var r0 int
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) (int, bool, error)); ok {
		return rf(ctx, handle, offset, whence)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) int); ok {
		r0 = rf(ctx, handle, offset, whence)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) bool); ok {
		r1 = rf(ctx, handle, offset, whence)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, int) error); ok {
		r2 = rf(ctx, handle, offset, whence)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WriteFile provides a mock function with given fields: ctx, handle, buf
func (_m *Qmp) WriteFile(ctx context.Context, handle int, buf []byte) error {
	ret := _m.Called(ctx, handle, buf)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []byte) error); ok {
		r0 = rf(ctx, handle, buf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQmp creates a new instance of Qmp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQmp(t interface {
	mock.TestingT
	Cleanup(func())
}) *Qmp {
	mock := &Qmp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
