// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	agent "github.com/projecteru2/yavirt/internal/virt/agent"

	libvirt "github.com/libvirt/libvirt-go"

	mock "github.com/stretchr/testify/mock"

	models "github.com/projecteru2/yavirt/internal/models"

	types "github.com/projecteru2/yavirt/internal/virt/types"

	volume "github.com/projecteru2/yavirt/internal/virt/volume"
)

// Bot is an autogenerated mock type for the Bot type
type Bot struct {
	mock.Mock
}

// AmplifyVolume provides a mock function with given fields: vol, cap, devPath
func (_m *Bot) AmplifyVolume(vol volume.Virt, cap int64, devPath string) error {
	ret := _m.Called(vol, cap, devPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(volume.Virt, int64, string) error); ok {
		r0 = rf(vol, cap, devPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttachVolume provides a mock function with given fields: volmod, devName
func (_m *Bot) AttachVolume(volmod *models.Volume, devName string) (func(), error) {
	ret := _m.Called(volmod, devName)

	var r0 func()
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Volume, string) (func(), error)); ok {
		return rf(volmod, devName)
	}
	if rf, ok := ret.Get(0).(func(*models.Volume, string) func()); ok {
		r0 = rf(volmod, devName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Volume, string) error); ok {
		r1 = rf(volmod, devName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BindExtraNetwork provides a mock function with given fields:
func (_m *Bot) BindExtraNetwork() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Boot provides a mock function with given fields:
func (_m *Bot) Boot() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Capture provides a mock function with given fields: user, name
func (_m *Bot) Capture(user string, name string) (*models.UserImage, error) {
	ret := _m.Called(user, name)

	var r0 *models.UserImage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.UserImage, error)); ok {
		return rf(user, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.UserImage); ok {
		r0 = rf(user, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserImage)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckVolume provides a mock function with given fields: _a0
func (_m *Bot) CheckVolume(_a0 *models.Volume) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Volume) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Bot) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitSnapshot provides a mock function with given fields: _a0, _a1
func (_m *Bot) CommitSnapshot(_a0 *models.Volume, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Volume, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitSnapshotByDay provides a mock function with given fields: _a0, _a1
func (_m *Bot) CommitSnapshotByDay(_a0 *models.Volume, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Volume, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields:
func (_m *Bot) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSnapshot provides a mock function with given fields: _a0
func (_m *Bot) CreateSnapshot(_a0 *models.Volume) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Volume) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteCommand provides a mock function with given fields: _a0, _a1
func (_m *Bot) ExecuteCommand(_a0 context.Context, _a1 []string) ([]byte, int, int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []byte
	var r1 int
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]byte, int, int, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) int); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string) int); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(context.Context, []string) error); ok {
		r3 = rf(_a0, _a1)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetState provides a mock function with given fields:
func (_m *Bot) GetState() (libvirt.DomainState, error) {
	ret := _m.Called()

	var r0 libvirt.DomainState
	var r1 error
	if rf, ok := ret.Get(0).(func() (libvirt.DomainState, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() libvirt.DomainState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(libvirt.DomainState)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUUID provides a mock function with given fields:
func (_m *Bot) GetUUID() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsFolder provides a mock function with given fields: _a0, _a1
func (_m *Bot) IsFolder(_a0 context.Context, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeDirectory provides a mock function with given fields: ctx, path, parent
func (_m *Bot) MakeDirectory(ctx context.Context, path string, parent bool) error {
	ret := _m.Called(ctx, path, parent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, path, parent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migrate provides a mock function with given fields:
func (_m *Bot) Migrate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenConsole provides a mock function with given fields: _a0, _a1
func (_m *Bot) OpenConsole(_a0 context.Context, _a1 types.OpenConsoleFlags) (types.Console, error) {
	ret := _m.Called(_a0, _a1)

	var r0 types.Console
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.OpenConsoleFlags) (types.Console, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.OpenConsoleFlags) types.Console); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Console)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.OpenConsoleFlags) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenFile provides a mock function with given fields: path, mode
func (_m *Bot) OpenFile(path string, mode string) (agent.File, error) {
	ret := _m.Called(path, mode)

	var r0 agent.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (agent.File, error)); ok {
		return rf(path, mode)
	}
	if rf, ok := ret.Get(0).(func(string, string) agent.File); ok {
		r0 = rf(path, mode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(agent.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(path, mode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAll provides a mock function with given fields: _a0, _a1
func (_m *Bot) RemoveAll(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepairVolume provides a mock function with given fields: _a0
func (_m *Bot) RepairVolume(_a0 *models.Volume) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Volume) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resize provides a mock function with given fields: cpu, mem
func (_m *Bot) Resize(cpu int, mem int64) error {
	ret := _m.Called(cpu, mem)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int64) error); ok {
		r0 = rf(cpu, mem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RestoreSnapshot provides a mock function with given fields: _a0, _a1
func (_m *Bot) RestoreSnapshot(_a0 *models.Volume, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Volume, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resume provides a mock function with given fields:
func (_m *Bot) Resume() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: force
func (_m *Bot) Shutdown(force bool) error {
	ret := _m.Called(force)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Suspend provides a mock function with given fields:
func (_m *Bot) Suspend() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Trylock provides a mock function with given fields:
func (_m *Bot) Trylock() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Undefine provides a mock function with given fields:
func (_m *Bot) Undefine() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unlock provides a mock function with given fields:
func (_m *Bot) Unlock() {
	_m.Called()
}

type mockConstructorTestingTNewBot interface {
	mock.TestingT
	Cleanup(func())
}

// NewBot creates a new instance of Bot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBot(t mockConstructorTestingTNewBot) *Bot {
	mock := &Bot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
