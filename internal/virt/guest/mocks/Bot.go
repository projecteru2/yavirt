// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	agent "github.com/projecteru2/yavirt/internal/virt/agent"

	internaltypes "github.com/projecteru2/yavirt/internal/types"

	libvirt "github.com/projecteru2/yavirt/third_party/libvirt"

	mock "github.com/stretchr/testify/mock"

	pkglibvirt "github.com/projecteru2/yavirt/pkg/libvirt"

	types "github.com/projecteru2/yavirt/pkg/vmimage/types"

	volume "github.com/projecteru2/yavirt/internal/volume"
)

// Bot is an autogenerated mock type for the Bot type
type Bot struct {
	mock.Mock
}

// AmplifyVolume provides a mock function with given fields: vol, cap
func (_m *Bot) AmplifyVolume(vol volume.Volume, cap int64) error {
	ret := _m.Called(vol, cap)

	if len(ret) == 0 {
		panic("no return value specified for AmplifyVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(volume.Volume, int64) error); ok {
		r0 = rf(vol, cap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttachGPUs provides a mock function with given fields: pcm
func (_m *Bot) AttachGPUs(pcm map[string]int) error {
	ret := _m.Called(pcm)

	if len(ret) == 0 {
		panic("no return value specified for AttachGPUs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]int) error); ok {
		r0 = rf(pcm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttachVolume provides a mock function with given fields: volmod
func (_m *Bot) AttachVolume(volmod volume.Volume) (func(), error) {
	ret := _m.Called(volmod)

	if len(ret) == 0 {
		panic("no return value specified for AttachVolume")
	}

	var r0 func()
	var r1 error
	if rf, ok := ret.Get(0).(func(volume.Volume) (func(), error)); ok {
		return rf(volmod)
	}
	if rf, ok := ret.Get(0).(func(volume.Volume) func()); ok {
		r0 = rf(volmod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	if rf, ok := ret.Get(1).(func(volume.Volume) error); ok {
		r1 = rf(volmod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BindExtraNetwork provides a mock function with given fields:
func (_m *Bot) BindExtraNetwork() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BindExtraNetwork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Boot provides a mock function with given fields: ctx
func (_m *Bot) Boot(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Boot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Capture provides a mock function with given fields: imgName
func (_m *Bot) Capture(imgName string) (*types.Image, error) {
	ret := _m.Called(imgName)

	if len(ret) == 0 {
		panic("no return value specified for Capture")
	}

	var r0 *types.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Image, error)); ok {
		return rf(imgName)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Image); ok {
		r0 = rf(imgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckVolume provides a mock function with given fields: _a0
func (_m *Bot) CheckVolume(_a0 volume.Volume) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CheckVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(volume.Volume) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Bot) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitSnapshot provides a mock function with given fields: _a0, _a1
func (_m *Bot) CommitSnapshot(_a0 volume.Volume, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CommitSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(volume.Volume, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitSnapshotByDay provides a mock function with given fields: _a0, _a1
func (_m *Bot) CommitSnapshotByDay(_a0 volume.Volume, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CommitSnapshotByDay")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(volume.Volume, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSnapshot provides a mock function with given fields: _a0
func (_m *Bot) CreateSnapshot(_a0 volume.Volume) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(volume.Volume) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Define provides a mock function with given fields: ctx
func (_m *Bot) Define(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Define")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachGPUs provides a mock function with given fields: pcm
func (_m *Bot) DetachGPUs(pcm map[string]int) error {
	ret := _m.Called(pcm)

	if len(ret) == 0 {
		panic("no return value specified for DetachGPUs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]int) error); ok {
		r0 = rf(pcm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachVolume provides a mock function with given fields: vol
func (_m *Bot) DetachVolume(vol volume.Volume) error {
	ret := _m.Called(vol)

	if len(ret) == 0 {
		panic("no return value specified for DetachVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(volume.Volume) error); ok {
		r0 = rf(vol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteCommand provides a mock function with given fields: _a0, _a1
func (_m *Bot) ExecuteCommand(_a0 context.Context, _a1 []string) ([]byte, int, int, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteCommand")
	}

	var r0 []byte
	var r1 int
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]byte, int, int, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) int); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string) int); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(context.Context, []string) error); ok {
		r3 = rf(_a0, _a1)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FSFreezeAll provides a mock function with given fields: ctx
func (_m *Bot) FSFreezeAll(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FSFreezeAll")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FSFreezeStatus provides a mock function with given fields: ctx
func (_m *Bot) FSFreezeStatus(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FSFreezeStatus")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FSThawAll provides a mock function with given fields: ctx
func (_m *Bot) FSThawAll(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FSThawAll")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields:
func (_m *Bot) GetState() (libvirt.DomainState, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 libvirt.DomainState
	var r1 error
	if rf, ok := ret.Get(0).(func() (libvirt.DomainState, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() libvirt.DomainState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(libvirt.DomainState)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUUID provides a mock function with given fields:
func (_m *Bot) GetUUID() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUUID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsFolder provides a mock function with given fields: _a0, _a1
func (_m *Bot) IsFolder(_a0 context.Context, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IsFolder")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeDirectory provides a mock function with given fields: ctx, path, parent
func (_m *Bot) MakeDirectory(ctx context.Context, path string, parent bool) error {
	ret := _m.Called(ctx, path, parent)

	if len(ret) == 0 {
		panic("no return value specified for MakeDirectory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, path, parent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migrate provides a mock function with given fields:
func (_m *Bot) Migrate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenConsole provides a mock function with given fields: _a0, _a1
func (_m *Bot) OpenConsole(_a0 context.Context, _a1 internaltypes.OpenConsoleFlags) (*pkglibvirt.Console, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OpenConsole")
	}

	var r0 *pkglibvirt.Console
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, internaltypes.OpenConsoleFlags) (*pkglibvirt.Console, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, internaltypes.OpenConsoleFlags) *pkglibvirt.Console); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkglibvirt.Console)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, internaltypes.OpenConsoleFlags) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenFile provides a mock function with given fields: ctx, path, mode
func (_m *Bot) OpenFile(ctx context.Context, path string, mode string) (agent.File, error) {
	ret := _m.Called(ctx, path, mode)

	if len(ret) == 0 {
		panic("no return value specified for OpenFile")
	}

	var r0 agent.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (agent.File, error)); ok {
		return rf(ctx, path, mode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) agent.File); ok {
		r0 = rf(ctx, path, mode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(agent.File)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, path, mode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAll provides a mock function with given fields: _a0, _a1
func (_m *Bot) RemoveAll(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepairVolume provides a mock function with given fields: _a0
func (_m *Bot) RepairVolume(_a0 volume.Volume) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RepairVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(volume.Volume) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplaceSysVolume provides a mock function with given fields: vol
func (_m *Bot) ReplaceSysVolume(vol volume.Volume) error {
	ret := _m.Called(vol)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceSysVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(volume.Volume) error); ok {
		r0 = rf(vol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resize provides a mock function with given fields: cpu, mem
func (_m *Bot) Resize(cpu int, mem int64) error {
	ret := _m.Called(cpu, mem)

	if len(ret) == 0 {
		panic("no return value specified for Resize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int64) error); ok {
		r0 = rf(cpu, mem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RestoreSnapshot provides a mock function with given fields: _a0, _a1
func (_m *Bot) RestoreSnapshot(_a0 volume.Volume, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RestoreSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(volume.Volume, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resume provides a mock function with given fields:
func (_m *Bot) Resume() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Resume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: ctx, force
func (_m *Bot) Shutdown(ctx context.Context, force bool) error {
	ret := _m.Called(ctx, force)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Suspend provides a mock function with given fields:
func (_m *Bot) Suspend() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Suspend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Trylock provides a mock function with given fields:
func (_m *Bot) Trylock() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Trylock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Undefine provides a mock function with given fields:
func (_m *Bot) Undefine() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Undefine")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unlock provides a mock function with given fields:
func (_m *Bot) Unlock() {
	_m.Called()
}

// NewBot creates a new instance of Bot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBot(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bot {
	mock := &Bot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
