// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	types "github.com/projecteru2/yavirt/internal/virt/guestfs/types"
	mock "github.com/stretchr/testify/mock"
)

// Guestfs is an autogenerated mock type for the Guestfs type
type Guestfs struct {
	mock.Mock
}

// Cat provides a mock function with given fields: _a0
func (_m *Guestfs) Cat(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *Guestfs) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Distro provides a mock function with given fields:
func (_m *Guestfs) Distro() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlkids provides a mock function with given fields:
func (_m *Guestfs) GetBlkids() (types.Blkids, error) {
	ret := _m.Called()

	var r0 types.Blkids
	var r1 error
	if rf, ok := ret.Get(0).(func() (types.Blkids, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() types.Blkids); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Blkids)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFstabEntries provides a mock function with given fields:
func (_m *Guestfs) GetFstabEntries() (map[string]string, error) {
	ret := _m.Called()

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDir provides a mock function with given fields: path
func (_m *Guestfs) IsDir(path string) (bool, error) {
	ret := _m.Called(path)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeDirectory provides a mock function with given fields: path, parent
func (_m *Guestfs) MakeDirectory(path string, parent bool) error {
	ret := _m.Called(path, parent)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(path, parent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: path
func (_m *Guestfs) Read(path string) ([]byte, error) {
	ret := _m.Called(path)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: _a0
func (_m *Guestfs) Remove(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tail provides a mock function with given fields: n, path
func (_m *Guestfs) Tail(n int, path string) ([]string, error) {
	ret := _m.Called(n, path)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) ([]string, error)); ok {
		return rf(n, path)
	}
	if rf, ok := ret.Get(0).(func(int, string) []string); ok {
		r0 = rf(n, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(n, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: fileName, remoteFileName
func (_m *Guestfs) Upload(fileName string, remoteFileName string) error {
	ret := _m.Called(fileName, remoteFileName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(fileName, remoteFileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: _a0, _a1
func (_m *Guestfs) Write(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGuestfs interface {
	mock.TestingT
	Cleanup(func())
}

// NewGuestfs creates a new instance of Guestfs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGuestfs(t mockConstructorTestingTNewGuestfs) *Guestfs {
	mock := &Guestfs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
