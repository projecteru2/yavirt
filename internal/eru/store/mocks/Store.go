// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/projecteru2/yavirt/internal/eru/types"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AddNode provides a mock function with given fields: ctx, opts
func (_m *Store) AddNode(ctx context.Context, opts *types.AddNodeOpts) (*types.Node, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for AddNode")
	}

	var r0 *types.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.AddNodeOpts) (*types.Node, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.AddNodeOpts) *types.Node); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.AddNodeOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckHealth provides a mock function with given fields: ctx
func (_m *Store) CheckHealth(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckHealth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetIdentifier provides a mock function with given fields: ctx
func (_m *Store) GetIdentifier(ctx context.Context) string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentifier")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetNode provides a mock function with given fields: ctx, nodename
func (_m *Store) GetNode(ctx context.Context, nodename string) (*types.Node, error) {
	ret := _m.Called(ctx, nodename)

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 *types.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Node, error)); ok {
		return rf(ctx, nodename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Node); ok {
		r0 = rf(ctx, nodename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nodename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeResource provides a mock function with given fields: ctx, nodename
func (_m *Store) GetNodeResource(ctx context.Context, nodename string) (*types.NodeResource, error) {
	ret := _m.Called(ctx, nodename)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeResource")
	}

	var r0 *types.NodeResource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.NodeResource, error)); ok {
		return rf(ctx, nodename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.NodeResource); ok {
		r0 = rf(ctx, nodename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NodeResource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nodename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeStatus provides a mock function with given fields: ctx, nodename
func (_m *Store) GetNodeStatus(ctx context.Context, nodename string) (*types.NodeStatus, error) {
	ret := _m.Called(ctx, nodename)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeStatus")
	}

	var r0 *types.NodeStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.NodeStatus, error)); ok {
		return rf(ctx, nodename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.NodeStatus); ok {
		r0 = rf(ctx, nodename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NodeStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nodename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkload provides a mock function with given fields: ctx, id
func (_m *Store) GetWorkload(ctx context.Context, id string) (*types.Workload, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkload")
	}

	var r0 *types.Workload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Workload, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Workload); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Workload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodeWorkloads provides a mock function with given fields: ctx, nodename
func (_m *Store) ListNodeWorkloads(ctx context.Context, nodename string) ([]*types.Workload, error) {
	ret := _m.Called(ctx, nodename)

	if len(ret) == 0 {
		panic("no return value specified for ListNodeWorkloads")
	}

	var r0 []*types.Workload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*types.Workload, error)); ok {
		return rf(ctx, nodename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.Workload); ok {
		r0 = rf(ctx, nodename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Workload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nodename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPodNodes provides a mock function with given fields: ctx, all, podname, labels
func (_m *Store) ListPodNodes(ctx context.Context, all bool, podname string, labels map[string]string) ([]*types.Node, error) {
	ret := _m.Called(ctx, all, podname, labels)

	if len(ret) == 0 {
		panic("no return value specified for ListPodNodes")
	}

	var r0 []*types.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, string, map[string]string) ([]*types.Node, error)); ok {
		return rf(ctx, all, podname, labels)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool, string, map[string]string) []*types.Node); ok {
		r0 = rf(ctx, all, podname, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool, string, map[string]string) error); ok {
		r1 = rf(ctx, all, podname, labels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeStatusStream provides a mock function with given fields: ctx
func (_m *Store) NodeStatusStream(ctx context.Context) (<-chan *types.NodeStatus, <-chan error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NodeStatusStream")
	}

	var r0 <-chan *types.NodeStatus
	var r1 <-chan error
	if rf, ok := ret.Get(0).(func(context.Context) (<-chan *types.NodeStatus, <-chan error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) <-chan *types.NodeStatus); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *types.NodeStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) <-chan error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

// SetNode provides a mock function with given fields: ctx, opts
func (_m *Store) SetNode(ctx context.Context, opts *types.SetNodeOpts) (*types.Node, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for SetNode")
	}

	var r0 *types.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SetNodeOpts) (*types.Node, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SetNodeOpts) *types.Node); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SetNodeOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNodeStatus provides a mock function with given fields: ctx, ttl
func (_m *Store) SetNodeStatus(ctx context.Context, ttl int64) error {
	ret := _m.Called(ctx, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetNodeStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetWorkloadStatus provides a mock function with given fields: ctx, status, ttl
func (_m *Store) SetWorkloadStatus(ctx context.Context, status *types.WorkloadStatus, ttl int64) error {
	ret := _m.Called(ctx, status, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetWorkloadStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.WorkloadStatus, int64) error); ok {
		r0 = rf(ctx, status, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
