// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	clientv3 "go.etcd.io/etcd/client/v3"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/projecteru2/yavirt/pkg/utils"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// BatchOperate provides a mock function with given fields: ctx, ops, cmps
func (_m *Store) BatchOperate(ctx context.Context, ops []clientv3.Op, cmps ...clientv3.Cmp) (bool, error) {
	_va := make([]interface{}, len(cmps))
	for _i := range cmps {
		_va[_i] = cmps[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, ops)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []clientv3.Op, ...clientv3.Cmp) (bool, error)); ok {
		return rf(ctx, ops, cmps...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []clientv3.Op, ...clientv3.Cmp) bool); ok {
		r0 = rf(ctx, ops, cmps...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []clientv3.Op, ...clientv3.Cmp) error); ok {
		r1 = rf(ctx, ops, cmps...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *Store) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, data, opts
func (_m *Store) Create(ctx context.Context, data map[string]string, opts ...clientv3.OpOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, ...clientv3.OpOption) error); ok {
		r0 = rf(ctx, data, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, keys, vers, opts
func (_m *Store) Delete(ctx context.Context, keys []string, vers map[string]int64, opts ...clientv3.OpOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, keys, vers)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]int64, ...clientv3.OpOption) error); ok {
		r0 = rf(ctx, keys, vers, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, keys
func (_m *Store) Exists(ctx context.Context, keys []string) (map[string]bool, error) {
	ret := _m.Called(ctx, keys)

	var r0 map[string]bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (map[string]bool, error)); ok {
		return rf(ctx, keys)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]bool); ok {
		r0 = rf(ctx, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, key, obj, opts
func (_m *Store) Get(ctx context.Context, key string, obj interface{}, opts ...clientv3.OpOption) (int64, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, obj)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...clientv3.OpOption) (int64, error)); ok {
		return rf(ctx, key, obj, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...clientv3.OpOption) int64); ok {
		r0 = rf(ctx, key, obj, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, ...clientv3.OpOption) error); ok {
		r1 = rf(ctx, key, obj, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrefix provides a mock function with given fields: ctx, prefix, limit
func (_m *Store) GetPrefix(ctx context.Context, prefix string, limit int64) (map[string][]byte, map[string]int64, error) {
	ret := _m.Called(ctx, prefix, limit)

	var r0 map[string][]byte
	var r1 map[string]int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (map[string][]byte, map[string]int64, error)); ok {
		return rf(ctx, prefix, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) map[string][]byte); ok {
		r0 = rf(ctx, prefix, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) map[string]int64); ok {
		r1 = rf(ctx, prefix, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]int64)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int64) error); ok {
		r2 = rf(ctx, prefix, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IncrUint32 provides a mock function with given fields: ctx, key
func (_m *Store) IncrUint32(ctx context.Context, key string) (uint32, error) {
	ret := _m.Called(ctx, key)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint32, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint32); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMutex provides a mock function with given fields: key
func (_m *Store) NewMutex(key string) (utils.Locker, error) {
	ret := _m.Called(key)

	var r0 utils.Locker
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (utils.Locker, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) utils.Locker); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.Locker)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, data, vers, opts
func (_m *Store) Update(ctx context.Context, data map[string]string, vers map[string]int64, opts ...clientv3.OpOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data, vers)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, map[string]int64, ...clientv3.OpOption) error); ok {
		r0 = rf(ctx, data, vers, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
