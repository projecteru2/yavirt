// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	utils "github.com/projecteru2/yavirt/pkg/utils"
	mock "github.com/stretchr/testify/mock"
)

// Locker is an autogenerated mock type for the Locker type
type Locker struct {
	mock.Mock
}

// Lock provides a mock function with given fields: _a0
func (_m *Locker) Lock(_a0 context.Context) (utils.Unlocker, error) {
	ret := _m.Called(_a0)

	var r0 utils.Unlocker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (utils.Unlocker, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) utils.Unlocker); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.Unlocker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLocker interface {
	mock.TestingT
	Cleanup(func())
}

// NewLocker creates a new instance of Locker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLocker(t mockConstructorTestingTNewLocker) *Locker {
	mock := &Locker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
