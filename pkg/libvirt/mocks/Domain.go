// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	libvirt "github.com/projecteru2/yavirt/pkg/libvirt"
	mock "github.com/stretchr/testify/mock"

	third_partylibvirt "github.com/projecteru2/yavirt/third_party/libvirt"
)

// Domain is an autogenerated mock type for the Domain type
type Domain struct {
	mock.Mock
}

// AmplifyVolume provides a mock function with given fields: filepath, cap
func (_m *Domain) AmplifyVolume(filepath string, cap uint64) error {
	ret := _m.Called(filepath, cap)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64) error); ok {
		r0 = rf(filepath, cap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttachDevice provides a mock function with given fields: xml
func (_m *Domain) AttachDevice(xml string) (third_partylibvirt.DomainState, error) {
	ret := _m.Called(xml)

	var r0 third_partylibvirt.DomainState
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (third_partylibvirt.DomainState, error)); ok {
		return rf(xml)
	}
	if rf, ok := ret.Get(0).(func(string) third_partylibvirt.DomainState); ok {
		r0 = rf(xml)
	} else {
		r0 = ret.Get(0).(third_partylibvirt.DomainState)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(xml)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields:
func (_m *Domain) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Destroy provides a mock function with given fields:
func (_m *Domain) Destroy() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DestroyFlags provides a mock function with given fields: flags
func (_m *Domain) DestroyFlags(flags third_partylibvirt.DomainDestroyFlagsValues) error {
	ret := _m.Called(flags)

	var r0 error
	if rf, ok := ret.Get(0).(func(third_partylibvirt.DomainDestroyFlagsValues) error); ok {
		r0 = rf(flags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachDevice provides a mock function with given fields: xml
func (_m *Domain) DetachDevice(xml string) (third_partylibvirt.DomainState, error) {
	ret := _m.Called(xml)

	var r0 third_partylibvirt.DomainState
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (third_partylibvirt.DomainState, error)); ok {
		return rf(xml)
	}
	if rf, ok := ret.Get(0).(func(string) third_partylibvirt.DomainState); ok {
		r0 = rf(xml)
	} else {
		r0 = ret.Get(0).(third_partylibvirt.DomainState)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(xml)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInfo provides a mock function with given fields:
func (_m *Domain) GetInfo() (*third_partylibvirt.DomainGetInfoRet, error) {
	ret := _m.Called()

	var r0 *third_partylibvirt.DomainGetInfoRet
	var r1 error
	if rf, ok := ret.Get(0).(func() (*third_partylibvirt.DomainGetInfoRet, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *third_partylibvirt.DomainGetInfoRet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*third_partylibvirt.DomainGetInfoRet)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetName provides a mock function with given fields:
func (_m *Domain) GetName() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields:
func (_m *Domain) GetState() (third_partylibvirt.DomainState, error) {
	ret := _m.Called()

	var r0 third_partylibvirt.DomainState
	var r1 error
	if rf, ok := ret.Get(0).(func() (third_partylibvirt.DomainState, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() third_partylibvirt.DomainState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(third_partylibvirt.DomainState)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUUIDString provides a mock function with given fields:
func (_m *Domain) GetUUIDString() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetXMLDesc provides a mock function with given fields: flags
func (_m *Domain) GetXMLDesc(flags third_partylibvirt.DomainXMLFlags) (string, error) {
	ret := _m.Called(flags)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(third_partylibvirt.DomainXMLFlags) (string, error)); ok {
		return rf(flags)
	}
	if rf, ok := ret.Get(0).(func(third_partylibvirt.DomainXMLFlags) string); ok {
		r0 = rf(flags)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(third_partylibvirt.DomainXMLFlags) error); ok {
		r1 = rf(flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenConsole provides a mock function with given fields: devname, flags
func (_m *Domain) OpenConsole(devname string, flags *libvirt.ConsoleFlags) (*libvirt.Console, error) {
	ret := _m.Called(devname, flags)

	var r0 *libvirt.Console
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *libvirt.ConsoleFlags) (*libvirt.Console, error)); ok {
		return rf(devname, flags)
	}
	if rf, ok := ret.Get(0).(func(string, *libvirt.ConsoleFlags) *libvirt.Console); ok {
		r0 = rf(devname, flags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*libvirt.Console)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *libvirt.ConsoleFlags) error); ok {
		r1 = rf(devname, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QemuAgentCommand provides a mock function with given fields: ctx, cmd
func (_m *Domain) QemuAgentCommand(ctx context.Context, cmd string) (string, error) {
	ret := _m.Called(ctx, cmd)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resume provides a mock function with given fields:
func (_m *Domain) Resume() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAutostart provides a mock function with given fields: autostart
func (_m *Domain) SetAutostart(autostart bool) error {
	ret := _m.Called(autostart)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(autostart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMemoryFlags provides a mock function with given fields: memory, flags
func (_m *Domain) SetMemoryFlags(memory uint64, flags third_partylibvirt.DomainMemoryModFlags) error {
	ret := _m.Called(memory, flags)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, third_partylibvirt.DomainMemoryModFlags) error); ok {
		r0 = rf(memory, flags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMemoryStatsPeriod provides a mock function with given fields: period, config, live
func (_m *Domain) SetMemoryStatsPeriod(period int, config bool, live bool) error {
	ret := _m.Called(period, config, live)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, bool, bool) error); ok {
		r0 = rf(period, config, live)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetVcpusFlags provides a mock function with given fields: vcpu, flags
func (_m *Domain) SetVcpusFlags(vcpu uint, flags third_partylibvirt.DomainVCPUFlags) error {
	ret := _m.Called(vcpu, flags)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, third_partylibvirt.DomainVCPUFlags) error); ok {
		r0 = rf(vcpu, flags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShutdownFlags provides a mock function with given fields: flags
func (_m *Domain) ShutdownFlags(flags libvirt.DomainShutdownFlags) error {
	ret := _m.Called(flags)

	var r0 error
	if rf, ok := ret.Get(0).(func(libvirt.DomainShutdownFlags) error); ok {
		r0 = rf(flags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Suspend provides a mock function with given fields:
func (_m *Domain) Suspend() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UndefineFlags provides a mock function with given fields: flags
func (_m *Domain) UndefineFlags(flags third_partylibvirt.DomainUndefineFlagsValues) error {
	ret := _m.Called(flags)

	var r0 error
	if rf, ok := ret.Get(0).(func(third_partylibvirt.DomainUndefineFlagsValues) error); ok {
		r0 = rf(flags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDomain creates a new instance of Domain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDomain(t interface {
	mock.TestingT
	Cleanup(func())
}) *Domain {
	mock := &Domain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
