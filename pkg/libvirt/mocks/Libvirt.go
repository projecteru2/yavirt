// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	libvirt "github.com/projecteru2/yavirt/pkg/libvirt"
	mock "github.com/stretchr/testify/mock"
)

// Libvirt is an autogenerated mock type for the Libvirt type
type Libvirt struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Libvirt) Close() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefineDomain provides a mock function with given fields: _a0
func (_m *Libvirt) DefineDomain(_a0 string) (libvirt.Domain, error) {
	ret := _m.Called(_a0)

	var r0 libvirt.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (libvirt.Domain, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) libvirt.Domain); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(libvirt.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomainsNames provides a mock function with given fields:
func (_m *Libvirt) ListDomainsNames() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupDomain provides a mock function with given fields: _a0
func (_m *Libvirt) LookupDomain(_a0 string) (libvirt.Domain, error) {
	ret := _m.Called(_a0)

	var r0 libvirt.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (libvirt.Domain, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) libvirt.Domain); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(libvirt.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLibvirt interface {
	mock.TestingT
	Cleanup(func())
}

// NewLibvirt creates a new instance of Libvirt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLibvirt(t mockConstructorTestingTNewLibvirt) *Libvirt {
	mock := &Libvirt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
